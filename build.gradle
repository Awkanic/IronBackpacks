buildscript {
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.0.4'
}

apply plugin: 'forge'
apply plugin: 'curseforge'

group = package_group
archivesBaseName = mod_name
version = "${mc_version}-${major_version}.${minor_version}.${build_number}"

// Ignore this error. It'll work just fine when building.
import org.ajoberstar.grgit.*

ext.repo = Grgit.open(project.file('.'))
def gitHash = 'unknown'

if (new File(projectDir, '.git').exists())
    gitHash = repo.log().find().abbreviatedId

ext.priv = parseConfig(file('private'))

repositories {}

dependencies {}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    replace "@VERSION@", project.version
    replaceIn "ModInformation.java"

    if (project.hasProperty('mappings_version'))
        mappings = project.mappings_version
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

jar {
    classifier = ''
    manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash
    )
}

// Source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// Javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// Deobfuscated jar
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

//Not now not with clean and auto-upload to curse, it just deletes it so there is no point
//tasks.build.dependsOn sourceJar, javadocJar, deobfJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

String getChangelogText() {
    def changelogFile = new File('changes.txt')
    String str = ''
    String separator = '---'
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (lineCount < 3) {
            lineCount++
            if (it.startsWith(separator)) {return}
        }
        if (!it.startsWith(separator)) {
            str += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
            return
        }
        done = true // once we go past the first version block, parse no more
    }
    return str
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

curseforge {
    apiKey = priv.curse_key
    project {
        id = "${curse_id}"
        changelog = getChangelogText()
        releaseType = release_as_beta.toBoolean() ? "beta" : "release"
        version = release_as_beta.toBoolean() ? version : version + "-b"
    }
}

task incrementVersionNumber {
    ant.replace(file: "gradle.properties", token: build_number, value: (build_number.toString().toInteger()) + 1)
}

//Adds a new changelog segment for the next version. Nifty!
task makeNewChangelog {
    def changelogFile = new File('changes.txt')
    String newText = '------------------------------------------------------\n' +
            'Version '+project.version+"\n" +
            '------------------------------------------------------\n' +
            'Additions\n' +
            '- None\n' +
            '\n' +
            'Changes\n' +
            '- None\n' +
            '\n' +
            'Bug Fixes\n' +
            '- None\n'
    String oldText = changelogFile.getText()
    changelogFile.setText(newText + oldText);
}

//enforce correct order
tasks.build.mustRunAfter clean
tasks.incrementVersionNumber.mustRunAfter build
tasks.makeNewChangelog.mustRunAfter incrementVersionNumber

//curseforge uses these tasks
tasks.curseforge.dependsOn clean, build, incrementVersionNumber, makeNewChangelog
//TODO: changelog had old (cached) version number? Was 1 behind.

//to make the resources work in idea
idea { module { inheritOutputDirs = true } }